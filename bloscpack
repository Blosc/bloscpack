#!/usr/bin/env python
# -*- coding: utf-8 -*-
# vim :set ft=py:

import sys
import os.path as path
import blosc
import argparse

"""

TODO
----

* author licencse readme
* shuffel
* files larger than memory
* input-pipe and --raw for output
* --verbose switch

"""

EXTENSION = '.blp'
DEFAULT_TYPESIZE = 4
DEFAULT_CLEVEL = 7
version = '0.1.0-dev'

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
            description='command line de/compression with blosc')
    # accepts a single input file for now
    parser.add_argument('file_', metavar='<file>', type=str, nargs=1,
                            help='file to be de/compressed')
    # print version of bloscpack, python-blosc and blosc itself
    parser.add_argument('--version', action='version',
            version='%(prog)s: ' + ("'%s'\n" % version) + \
                    "python-blosc: '%s'\n" % blosc.version.__version__ +\
                    "blosc: '%s'\n" % blosc.BLOSC_VERSION_STRING
            )
    parser.add_argument( '--typesize', metavar='<size>', default=None,
            type=int, help='typesize argument for compressor (compression only)')
    parser.add_argument( '--clevel', metavar='<level>', default=None,
            choices=range(10), type=int,
            help='compression level (compression only)')
    # options to do heavy lifting
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-c', '--compress',
            action='store_true', dest='compress', default=False,
            help='perform compression on <file>')
    group.add_argument('-d', '--decompress',
            action='store_true', dest='decompress', default=False,
            help='perform decompression on <file>')
    args = parser.parse_args()
    file_ = args.file_[0]

    # argparse takes care of the mutual exclusivity of -c and -d
    if args.compress:
        input_file = file_
        output_file = file_ + EXTENSION
        blosc_function = blosc.compress
        typesize = args.typesize if args.typesize \
            is not None else DEFAULT_TYPESIZE
        clevel = args.clevel if args.clevel \
            is not None else DEFAULT_CLEVEL
        blosc_args = [typesize, clevel, True]
    elif args.decompress:
        for arg,switch in [(args.typesize, '--typesize'),
                           (args.clevel, '--clevel')]:
            if arg is not None:
                parser.error("'%s' makes no sense when decompressing" % switch)
        input_file = file_
        output_file = file_
        # remove the extension for output file
        if file_.endswith(EXTENSION):
            output_file = input_file[:-len(EXTENSION)]
        else:
            parser.error("input file '%s' does not end with '%s'" %
                    (input_file, EXTENSION))
        blosc_function = blosc.decompress
        blosc_args = []
    else:
        # we should never reach this
        parser.error('You found the easter-egg, please contact the autor')
    # check files exist/don't exist
    if not path.exists(input_file):
        parser.error("input file '%s' does not exist!" % input_file)
    if path.exists(output_file):
        parser.error("output file '%s' exists!" % output_file)
    # use context managers and functions pointers to do the heavy lifting
    with open(input_file, 'rb') as input_fp, \
                open(output_file, 'wb') as output_fp:
            in_data = input_fp.read()
            out_data = blosc_function(in_data, *blosc_args)
            output_fp.write(out_data)
