#!/usr/bin/env cram
# vim: set syntax=cram :

  $ . $TESTDIR/cram_strap.sh

Create a test datafile.

  $ PYTHONPATH=$TESTDIR/../  python $TESTDIR/mktestarray.py
  $ ls
  data.dat
  meta.json

Get more information using --verbose:

  $ blpk --verbose compress data.dat
  blpk: using [0-9]+ threads (re)
  blpk: getting ready for compression
  blpk: input file is: 'data.dat'
  blpk: output file is: 'data.dat.blp'
  blpk: input file size: 152.59M (160000000B)
  blpk: nchunks: 153
  blpk: chunk_size: 1.0M (1048576B)
  blpk: last_chunk_size: 602.0K (616448B)
  blpk: output file size: 16.2M (16984384B)
  blpk: compression ratio: 9.420418
  blpk: done
  $ blpk --verbose decompress data.dat.blp data.dat.dcmp
  blpk: using [0-9]+ threads (re)
  blpk: getting ready for decompression
  blpk: input file is: 'data.dat.blp'
  blpk: output file is: 'data.dat.dcmp'
  blpk: input file size: 16.2M
  blpk: output file size: 152.59M
  blpk: decompression ratio: 9.420418
  blpk: done
  $ rm data.dat.blp data.dat.dcmp

Get more information using --verbose, but with metadata:

  $ blpk --verbose compress --metadata meta.json data.dat
  blpk: using [0-9]+ threads (re)
  blpk: getting ready for compression
  blpk: input file is: 'data.dat'
  blpk: output file is: 'data.dat.blp'
  blpk: input file size: 152.59M (160000000B)
  blpk: nchunks: 153
  blpk: chunk_size: 1.0M (1048576B)
  blpk: last_chunk_size: 602.0K (616448B)
  blpk: output file size: 16.2M (16985080B)
  blpk: compression ratio: 9.420032
  blpk: done
  $ blpk --verbose decompress data.dat.blp data.dat.dcmp
  blpk: using [0-9]+ threads (re)
  blpk: getting ready for decompression
  blpk: input file is: 'data.dat.blp'
  blpk: output file is: 'data.dat.dcmp'
  blpk: input file size: 16.2M
  blpk: read compressed metadata of size: '62'
  blpk: output file size: 152.59M
  blpk: decompression ratio: 9.420032
  blpk: Metadata is:
  blpk: '{u'dtype': u'<f8', u'shape': [20000000], u'container': u'numpy', u'order': u'C'}'
  blpk: done
  $ rm data.dat.blp data.dat.dcmp

Try using --debug

  $ blpk --debug compress --chunk-size 50M data.dat
  blpk: command line argument parsing complete
  blpk: command line arguments are: 
  blpk:     force: False
  blpk:     verbose: False
  blpk:     offsets: True
  blpk:     checksum: adler32
  blpk:     subcommand: compress
  blpk:     out_file: None
  blpk:     metadata: None
  blpk:     cname: blosclz
  blpk:     in_file: data.dat
  blpk:     chunk_size: 52428800
  blpk:     debug: True
  blpk:     shuffle: True
  blpk:     typesize: 8
  blpk:     clevel: 7
  blpk:     nthreads: .* (re)
  blpk: using .* threads (re)
  blpk: getting ready for compression
  blpk: input file is: 'data.dat'
  blpk: output file is: 'data.dat.blp'
  blpk: input file size: 152.59M (160000000B)
  blpk: nchunks: 4
  blpk: chunk_size: 50.0M (52428800B)
  blpk: last_chunk_size: 2.59M (2713600B)
  blpk: BloscArgs:
  blpk:     typesize: 8
  blpk:     clevel: 7
  blpk:     shuffle: True
  blpk:     cname: 'blosclz'
  blpk: BloscpackArgs:
  blpk:     offsets: True
  blpk:     checksum: 'adler32'
  .* (re)
  blpk: metadata_args will be silently ignored
  blpk: max_app_chunks is a callable
  blpk: max_app_chunks was set to: 40
  blpk: BloscpackHeader:
  blpk:     format_version: 3
  blpk:     offsets: True
  blpk:     metadata: False
  blpk:     checksum: 'adler32'
  blpk:     typesize: 8
  blpk:     chunk_size: 50.0M (52428800B)
  blpk:     last_chunk: 2.59M (2713600B)
  blpk:     nchunks: 4
  blpk:     max_app_chunks: 40
  blpk: raw_bloscpack_header: 'blpk\x03\x01\x01\x08\x00\x00 \x03\x00h)\x00\x04\x00\x00\x00\x00\x00\x00\x00(\x00\x00\x00\x00\x00\x00\x00'
  blpk: Handle chunk '0'
  blpk: checksum \(adler32\)\: .* (re)
  blpk: chunk handled, in: 50.0M (52428800B) out: 6.69M (7010707B)
  blpk: Handle chunk '1'
  blpk: checksum \(adler32\)\: .* (re)
  blpk: chunk handled, in: 50.0M (52428800B) out: 4.99M (5230082B)
  blpk: Handle chunk '2'
  blpk: checksum \(adler32\)\: .* (re)
  blpk: chunk handled, in: 50.0M (52428800B) out: 4.29M (4493269B)
  blpk: Handle chunk '3' (last)
  blpk: checksum \(adler32\)\: .* (re)
  blpk: chunk handled, in: 2.59M (2713600B) out: 228.35K (233834B)
  blpk: Writing '4' offsets: '[384, 7011095, 12241181, 16734454]'
  blpk: Raw offsets: '\x80\x01\x00\x00\x00\x00\x00\x00\x17\xfbj\x00\x00\x00\x00\x00\x1d\xc9\xba\x00\x00\x00\x00\x00\xf6X\xff\x00\x00\x00\x00\x00'
  blpk: output file size: 16.18M (16968292B)
  blpk: compression ratio: 9.429352
  blpk: done
  $ blpk --debug decompress data.dat.blp data.dat.dcmp
  blpk: command line argument parsing complete
  blpk: command line arguments are: 
  blpk:     force: False
  blpk:     verbose: False
  blpk:     out_file: data.dat.dcmp
  blpk:     subcommand: decompress
  blpk:     no_check_extension: False
  blpk:     in_file: data.dat.blp
  blpk:     debug: True
  blpk:     nthreads: .* (re)
  blpk: using .* threads (re)
  blpk: getting ready for decompression
  blpk: input file is: 'data.dat.blp'
  blpk: output file is: 'data.dat.dcmp'
  blpk: input file size: 16.18M
  blpk: reading bloscpack header
  blpk: bloscpack_header_raw: 'blpk\x03\x01\x01\x08\x00\x00 \x03\x00h)\x00\x04\x00\x00\x00\x00\x00\x00\x00(\x00\x00\x00\x00\x00\x00\x00'
  blpk: bloscpack header: BloscpackHeader(format_version=3, offsets=True, metadata=False, checksum='adler32', typesize=8, chunk_size=52428800, last_chunk=2713600, nchunks=4, max_app_chunks=40)
  blpk: Read raw offsets: '\x80\x01\x00\x00\x00\x00\x00\x00\x17\xfbj\x00\x00\x00\x00\x00\x1d\xc9\xba\x00\x00\x00\x00\x00\xf6X\xff\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
  blpk: Offsets: [384, 7011095, 12241181, 16734454]
  blpk: blosc_header: {'versionlz': 1, 'blocksize': 131072, 'ctbytes': 7010707, 'version': 2, 'flags': 1, 'nbytes': 52428800, 'typesize': 8}
  blpk: decompressing chunk '0'
  blpk: checksum OK \(adler32\)\: .* (re)
  blpk: chunk handled, in: 6.69M (7010707B) out: 50.0M (52428800B)
  blpk: blosc_header: {'versionlz': 1, 'blocksize': 131072, 'ctbytes': 5230082, 'version': 2, 'flags': 1, 'nbytes': 52428800, 'typesize': 8}
  blpk: decompressing chunk '1'
  blpk: checksum OK \(adler32\)\: .* (re)
  blpk: chunk handled, in: 4.99M (5230082B) out: 50.0M (52428800B)
  blpk: blosc_header: {'versionlz': 1, 'blocksize': 131072, 'ctbytes': 4493269, 'version': 2, 'flags': 1, 'nbytes': 52428800, 'typesize': 8}
  blpk: decompressing chunk '2'
  blpk: checksum OK \(adler32\)\: .* (re)
  blpk: chunk handled, in: 4.29M (4493269B) out: 50.0M (52428800B)
  blpk: blosc_header: {'versionlz': 1, 'blocksize': 131072, 'ctbytes': 233834, 'version': 2, 'flags': 1, 'nbytes': 2713600, 'typesize': 8}
  blpk: decompressing chunk '3' (last)
  blpk: checksum OK \(adler32\)\: .* (re)
  blpk: chunk handled, in: 228.35K (233834B) out: 2.59M (2713600B)
  blpk: output file size: 152.59M
  blpk: decompression ratio: 9.429352
  blpk: done
  $ rm data.dat.blp data.dat.dcmp

Try using --debug with metadata:

  $ blpk --debug compress --chunk-size 50M --metadata meta.json data.dat
  blpk: command line argument parsing complete
  blpk: command line arguments are: 
  blpk:     force: False
  blpk:     verbose: False
  blpk:     offsets: True
  blpk:     checksum: adler32
  blpk:     subcommand: compress
  blpk:     out_file: None
  blpk:     metadata: meta.json
  blpk:     cname: blosclz
  blpk:     in_file: data.dat
  blpk:     chunk_size: 52428800
  blpk:     debug: True
  blpk:     shuffle: True
  blpk:     typesize: 8
  blpk:     clevel: 7
  blpk:     nthreads: .* (re)
  blpk: using .* threads (re)
  blpk: getting ready for compression
  blpk: input file is: 'data.dat'
  blpk: output file is: 'data.dat.blp'
  blpk: input file size: 152.59M (160000000B)
  blpk: nchunks: 4
  blpk: chunk_size: 50.0M (52428800B)
  blpk: last_chunk_size: 2.59M (2713600B)
  blpk: BloscArgs:
  blpk:     typesize: 8
  blpk:     clevel: 7
  blpk:     shuffle: True
  blpk:     cname: 'blosclz'
  blpk: BloscpackArgs:
  blpk:     offsets: True
  blpk:     checksum: 'adler32'
  blpk:     max_app_chunks: .*$ (re)
  blpk: MetadataArgs:
  blpk:     magic_format: 'JSON'
  blpk:     meta_checksum: 'adler32'
  blpk:     meta_codec: 'zlib'
  blpk:     meta_level: 6
  blpk:     max_meta_size: .*$ (re)
  blpk: max_app_chunks is a callable
  blpk: max_app_chunks was set to: 40
  blpk: BloscpackHeader:
  blpk:     format_version: 3
  blpk:     offsets: True
  blpk:     metadata: True
  blpk:     checksum: 'adler32'
  blpk:     typesize: 8
  blpk:     chunk_size: 50.0M (52428800B)
  blpk:     last_chunk: 2.59M (2713600B)
  blpk:     nchunks: 4
  blpk:     max_app_chunks: 40
  blpk: raw_bloscpack_header: 'blpk\x03\x03\x01\x08\x00\x00 \x03\x00h)\x00\x04\x00\x00\x00\x00\x00\x00\x00(\x00\x00\x00\x00\x00\x00\x00'
  blpk: Raw compressed metadata of size '62': 'x\x9c\xabVJ)\xa9,HU\xb2R\xb2I\xb3P\xd2Q*\xceH\x04\xf1\xa2\x8d\x0c  VG)9?\xaf$13/\xb5\x08\xa8(\xaf4\xb7\xa0\x12\xa8,\xbf(\x05\xccwV\xaa\x05\x00\x95,\x13\xe7'
  blpk: max meta size is deemed to be: 660
  blpk: raw_metadata_header: 'JSON\x00\x00\x00\x00\x00\x01\x01\x06B\x00\x00\x00\x94\x02\x00\x00>\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
  blpk: metadata has 598 preallocated empty bytes
  blpk: metadata checksum (adler32): '\x10\x18\x08\x11'
  blpk: metadata section occupies a total of 696.0B (696B)
  blpk: Handle chunk '0'
  blpk: checksum \(adler32\)\: .* (re)
  blpk: chunk handled, in: 50.0M (52428800B) out: 6.69M (7010707B)
  blpk: Handle chunk '1'
  blpk: checksum \(adler32\)\: .* (re)
  blpk: chunk handled, in: 50.0M (52428800B) out: 4.99M (5230082B)
  blpk: Handle chunk '2'
  blpk: checksum \(adler32\)\: .* (re)
  blpk: chunk handled, in: 50.0M (52428800B) out: 4.29M (4493269B)
  blpk: Handle chunk '3' (last)
  blpk: checksum \(adler32\)\: .* (re)
  blpk: chunk handled, in: 2.59M (2713600B) out: 228.35K (233834B)
  blpk: Writing '4' offsets: '[1080, 7011791, 12241877, 16735150]'
  blpk: Raw offsets: '8\x04\x00\x00\x00\x00\x00\x00\xcf\xfdj\x00\x00\x00\x00\x00\xd5\xcb\xba\x00\x00\x00\x00\x00\xae[\xff\x00\x00\x00\x00\x00'
  blpk: output file size: 16.18M (16968988B)
  blpk: compression ratio: 9.428965
  blpk: done
  $ blpk --debug decompress data.dat.blp data.dat.dcmp
  blpk: command line argument parsing complete
  blpk: command line arguments are: 
  blpk:     force: False
  blpk:     verbose: False
  blpk:     out_file: data.dat.dcmp
  blpk:     subcommand: decompress
  blpk:     no_check_extension: False
  blpk:     in_file: data.dat.blp
  blpk:     debug: True
  blpk:     nthreads: .* (re)
  blpk: using .* threads (re)
  blpk: getting ready for decompression
  blpk: input file is: 'data.dat.blp'
  blpk: output file is: 'data.dat.dcmp'
  blpk: input file size: 16.18M
  blpk: reading bloscpack header
  blpk: bloscpack_header_raw: 'blpk\x03\x03\x01\x08\x00\x00 \x03\x00h)\x00\x04\x00\x00\x00\x00\x00\x00\x00(\x00\x00\x00\x00\x00\x00\x00'
  blpk: bloscpack header: BloscpackHeader(format_version=3, offsets=True, metadata=True, checksum='adler32', typesize=8, chunk_size=52428800, last_chunk=2713600, nchunks=4, max_app_chunks=40)
  blpk: raw metadata header: ''JSON\x00\x00\x00\x00\x00\x01\x01\x06B\x00\x00\x00\x94\x02\x00\x00>\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00''
  blpk: MetadataHeader:
  blpk:     magic_format: 'JSON'
  blpk:     meta_options: '00000000'
  blpk:     meta_checksum: 'adler32'
  blpk:     meta_codec: 'zlib'
  blpk:     meta_level: 6
  blpk:     meta_size: 66.0B (66B)
  blpk:     max_meta_size: 660.0B (660B)
  blpk:     meta_comp_size: 62.0B (62B)
  blpk:     user_codec: ''
  blpk: metadata checksum OK (adler32): '\x10\x18\x08\x11' 
  blpk: read compressed metadata of size: '62'
  blpk: Read raw offsets: '8\x04\x00\x00\x00\x00\x00\x00\xcf\xfdj\x00\x00\x00\x00\x00\xd5\xcb\xba\x00\x00\x00\x00\x00\xae[\xff\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
  blpk: Offsets: [1080, 7011791, 12241877, 16735150]
  blpk: blosc_header: {'versionlz': 1, 'blocksize': 131072, 'ctbytes': 7010707, 'version': 2, 'flags': 1, 'nbytes': 52428800, 'typesize': 8}
  blpk: decompressing chunk '0'
  blpk: checksum OK \(adler32\)\: .* (re)
  blpk: chunk handled, in: 6.69M (7010707B) out: 50.0M (52428800B)
  blpk: blosc_header: {'versionlz': 1, 'blocksize': 131072, 'ctbytes': 5230082, 'version': 2, 'flags': 1, 'nbytes': 52428800, 'typesize': 8}
  blpk: decompressing chunk '1'
  blpk: checksum OK \(adler32\)\: .* (re)
  blpk: chunk handled, in: 4.99M (5230082B) out: 50.0M (52428800B)
  blpk: blosc_header: {'versionlz': 1, 'blocksize': 131072, 'ctbytes': 4493269, 'version': 2, 'flags': 1, 'nbytes': 52428800, 'typesize': 8}
  blpk: decompressing chunk '2'
  blpk: checksum OK \(adler32\)\: .* (re)
  blpk: chunk handled, in: 4.29M (4493269B) out: 50.0M (52428800B)
  blpk: blosc_header: {'versionlz': 1, 'blocksize': 131072, 'ctbytes': 233834, 'version': 2, 'flags': 1, 'nbytes': 2713600, 'typesize': 8}
  blpk: decompressing chunk '3' (last)
  blpk: checksum OK \(adler32\)\: .* (re)
  blpk: chunk handled, in: 228.35K (233834B) out: 2.59M (2713600B)
  blpk: output file size: 152.59M
  blpk: decompression ratio: 9.428965
  blpk: Metadata is:
  blpk: '{u'dtype': u'<f8', u'shape': [20000000], u'container': u'numpy', u'order': u'C'}'
  blpk: done
  $ rm data.dat.blp data.dat.dcmp
Check that directory is clean.

  $ ls
  data.dat
  meta.json
