#!/usr/bin/env cram
# vim: set syntax=cram :

  $ . $TESTDIR/cram_strap.sh

Create a test datafile.

  $ PYTHONPATH=$TESTDIR/../  python $TESTDIR/mktestarray.py
  $ ls
  data.dat
  meta.json

Get more information using --verbose:

  $ blpk --verbose compress data.dat
  blpk: using [0-9]+ threads (re)
  blpk: getting ready for compression
  blpk: input file is: 'data.dat'
  blpk: output file is: 'data.dat.blp'
  blpk: input file size: 152.59M (160000000B)
  blpk: nchunks: 153
  blpk: chunk_size: 1.0M (1048576B)
  blpk: last_chunk_size: 602.0K (616448B)
  blpk: output file size: 12.92M (13552386B)
  blpk: compression ratio: 11.806039
  blpk: done
  $ blpk --verbose decompress data.dat.blp data.dat.dcmp
  blpk: using [0-9]+ threads (re)
  blpk: getting ready for decompression
  blpk: input file is: 'data.dat.blp'
  blpk: output file is: 'data.dat.dcmp'
  blpk: input file size: 12.92M
  blpk: output file size: 152.59M
  blpk: decompression ratio: 11.806039
  blpk: done
  $ rm data.dat.blp data.dat.dcmp

Get more information using --verbose, but with metadata:

  $ blpk --verbose compress --metadata meta.json data.dat
  blpk: using [0-9]+ threads (re)
  blpk: getting ready for compression
  blpk: input file is: 'data.dat'
  blpk: output file is: 'data.dat.blp'
  blpk: input file size: 152.59M (160000000B)
  blpk: nchunks: 153
  blpk: chunk_size: 1.0M (1048576B)
  blpk: last_chunk_size: 602.0K (616448B)
  blpk: output file size: 12.93M (13553102B)
  blpk: compression ratio: 11.805415
  blpk: done
  $ blpk --verbose decompress data.dat.blp data.dat.dcmp
  blpk: using [0-9]+ threads (re)
  blpk: getting ready for decompression
  blpk: input file is: 'data.dat.blp'
  blpk: output file is: 'data.dat.dcmp'
  blpk: input file size: 12.93M
  blpk: read compressed metadata of size: '64'
  blpk: output file size: 152.59M
  blpk: decompression ratio: 11.805415
  blpk: Metadata:
  blpk: {   u'container': u'numpy',
  blpk:     u'dtype': u"'<f8'",
  blpk:     u'order': u'C',
  blpk:     u'shape': [20000000]}
  blpk: done
  $ rm data.dat.blp data.dat.dcmp

Try using --debug

  $ blpk --debug compress --chunk-size 50M data.dat
  blpk: command line argument parsing complete
  blpk: command line arguments are: 
  blpk:     checksum: adler32
  blpk:     chunk_size: 52428800
  blpk:     clevel: 7
  blpk:     cname: blosclz
  blpk:     debug: True
  blpk:     force: False
  blpk:     in_file: data.dat
  blpk:     metadata: None
  blpk:     nthreads: .* (re)
  blpk:     offsets: True
  blpk:     out_file: None
  blpk:     shuffle: True
  blpk:     subcommand: compress
  blpk:     typesize: 8
  blpk:     verbose: False
  blpk: using .* threads (re)
  blpk: getting ready for compression
  blpk: input file is: 'data.dat'
  blpk: output file is: 'data.dat.blp'
  blpk: input file size: 152.59M (160000000B)
  blpk: nchunks: 4
  blpk: chunk_size: 50.0M (52428800B)
  blpk: last_chunk_size: 2.59M (2713600B)
  blpk: BloscArgs:
  blpk:     typesize: 8
  blpk:     clevel: 7
  blpk:     shuffle: True
  blpk:     cname: 'blosclz'
  blpk: BloscpackArgs:
  blpk:     offsets: True
  blpk:     checksum: 'adler32'
  .* (re)
  blpk: metadata_args will be silently ignored
  blpk: max_app_chunks is a callable
  blpk: max_app_chunks was set to: 40
  blpk: BloscpackHeader:
  blpk:     format_version: 3
  blpk:     offsets: True
  blpk:     metadata: False
  blpk:     checksum: 'adler32'
  blpk:     typesize: 8
  blpk:     chunk_size: 50.0M (52428800B)
  blpk:     last_chunk: 2.59M (2713600B)
  blpk:     nchunks: 4
  blpk:     max_app_chunks: 40
  blpk: raw_bloscpack_header: 'blpk\x03\x01\x01\x08\x00\x00 \x03\x00h)\x00\x04\x00\x00\x00\x00\x00\x00\x00(\x00\x00\x00\x00\x00\x00\x00'
  blpk: Handle chunk '0'
  blpk: checksum \(adler32\)\: .* (re)
  blpk: chunk handled, in: 50.0M (52428800B) out: 5.56M (5829276B)
  blpk: Handle chunk '1'
  blpk: checksum \(adler32\)\: .* (re)
  blpk: chunk handled, in: 50.0M (52428800B) out: 4.1M (4296901B)
  blpk: Handle chunk '2'
  blpk: checksum \(adler32\)\: .* (re)
  blpk: chunk handled, in: 50.0M (52428800B) out: 3.09M (3238299B)
  blpk: Handle chunk '3' (last)
  blpk: checksum \(adler32\)\: .* (re)
  blpk: chunk handled, in: 2.59M (2713600B) out: 167.4K (171418B)
  blpk: Writing '4' offsets: '[384, 5829664, 10126569, 13364872]'
  blpk: Raw offsets: '\x80\x01\x00\x00\x00\x00\x00\x00 \xf4X\x00\x00\x00\x00\x00\xe9\x84\x9a\x00\x00\x00\x00\x00\x88\xee\xcb\x00\x00\x00\x00\x00'
  blpk: output file size: 12.91M (13536294B)
  blpk: compression ratio: 11.820074
  blpk: done
  $ blpk --debug decompress data.dat.blp data.dat.dcmp
  blpk: command line argument parsing complete
  blpk: command line arguments are: 
  blpk:     debug: True
  blpk:     force: False
  blpk:     in_file: data.dat.blp
  blpk:     no_check_extension: False
  blpk:     nthreads: .* (re)
  blpk:     out_file: data.dat.dcmp
  blpk:     subcommand: decompress
  blpk:     verbose: False
  blpk: using .* threads (re)
  blpk: getting ready for decompression
  blpk: input file is: 'data.dat.blp'
  blpk: output file is: 'data.dat.dcmp'
  blpk: input file size: 12.91M
  blpk: reading bloscpack header
  blpk: bloscpack_header_raw: 'blpk\x03\x01\x01\x08\x00\x00 \x03\x00h)\x00\x04\x00\x00\x00\x00\x00\x00\x00(\x00\x00\x00\x00\x00\x00\x00'
  blpk: bloscpack header: BloscpackHeader(format_version=3, offsets=True, metadata=False, checksum='adler32', typesize=8, chunk_size=52428800, last_chunk=2713600, nchunks=4, max_app_chunks=40)
  blpk: Read raw offsets: '\x80\x01\x00\x00\x00\x00\x00\x00 \xf4X\x00\x00\x00\x00\x00\xe9\x84\x9a\x00\x00\x00\x00\x00\x88\xee\xcb\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
  blpk: Offsets: [384, 5829664, 10126569, 13364872]
  blpk: blosc_header: OrderedDict([('version', 2), ('versionlz', 1), ('flags', 1), ('typesize', 8), ('nbytes', 52428800), ('blocksize', 262144), ('ctbytes', 5829276)])
  blpk: decompressing chunk '0'
  blpk: checksum OK \(adler32\)\: .* (re)
  blpk: chunk handled, in: 5.56M (5829276B) out: 50.0M (52428800B)
  blpk: blosc_header: OrderedDict([('version', 2), ('versionlz', 1), ('flags', 1), ('typesize', 8), ('nbytes', 52428800), ('blocksize', 262144), ('ctbytes', 4296901)])
  blpk: decompressing chunk '1'
  blpk: checksum OK \(adler32\)\: .* (re)
  blpk: chunk handled, in: 4.1M (4296901B) out: 50.0M (52428800B)
  blpk: blosc_header: OrderedDict([('version', 2), ('versionlz', 1), ('flags', 1), ('typesize', 8), ('nbytes', 52428800), ('blocksize', 262144), ('ctbytes', 3238299)])
  blpk: decompressing chunk '2'
  blpk: checksum OK \(adler32\)\: .* (re)
  blpk: chunk handled, in: 3.09M (3238299B) out: 50.0M (52428800B)
  blpk: blosc_header: OrderedDict([('version', 2), ('versionlz', 1), ('flags', 1), ('typesize', 8), ('nbytes', 2713600), ('blocksize', 262144), ('ctbytes', 171418)])
  blpk: decompressing chunk '3' (last)
  blpk: checksum OK \(adler32\)\: .* (re)
  blpk: chunk handled, in: 167.4K (171418B) out: 2.59M (2713600B)
  blpk: output file size: 152.59M
  blpk: decompression ratio: 11.820074
  blpk: done
  $ rm data.dat.blp data.dat.dcmp

Try using --debug with metadata:

  $ blpk --debug compress --chunk-size 50M --metadata meta.json data.dat
  blpk: command line argument parsing complete
  blpk: command line arguments are: 
  blpk:     checksum: adler32
  blpk:     chunk_size: 52428800
  blpk:     clevel: 7
  blpk:     cname: blosclz
  blpk:     debug: True
  blpk:     force: False
  blpk:     in_file: data.dat
  blpk:     metadata: meta.json
  blpk:     nthreads: .* (re)
  blpk:     offsets: True
  blpk:     out_file: None
  blpk:     shuffle: True
  blpk:     subcommand: compress
  blpk:     typesize: 8
  blpk:     verbose: False
  blpk: using .* threads (re)
  blpk: getting ready for compression
  blpk: input file is: 'data.dat'
  blpk: output file is: 'data.dat.blp'
  blpk: input file size: 152.59M (160000000B)
  blpk: nchunks: 4
  blpk: chunk_size: 50.0M (52428800B)
  blpk: last_chunk_size: 2.59M (2713600B)
  blpk: BloscArgs:
  blpk:     typesize: 8
  blpk:     clevel: 7
  blpk:     shuffle: True
  blpk:     cname: 'blosclz'
  blpk: BloscpackArgs:
  blpk:     offsets: True
  blpk:     checksum: 'adler32'
  blpk:     max_app_chunks: .*$ (re)
  blpk: MetadataArgs:
  blpk:     magic_format: 'JSON'
  blpk:     meta_checksum: 'adler32'
  blpk:     meta_codec: 'zlib'
  blpk:     meta_level: 6
  blpk:     max_meta_size: .*$ (re)
  blpk: max_app_chunks is a callable
  blpk: max_app_chunks was set to: 40
  blpk: BloscpackHeader:
  blpk:     format_version: 3
  blpk:     offsets: True
  blpk:     metadata: True
  blpk:     checksum: 'adler32'
  blpk:     typesize: 8
  blpk:     chunk_size: 50.0M (52428800B)
  blpk:     last_chunk: 2.59M (2713600B)
  blpk:     nchunks: 4
  blpk:     max_app_chunks: 40
  blpk: raw_bloscpack_header: 'blpk\x03\x03\x01\x08\x00\x00 \x03\x00h)\x00\x04\x00\x00\x00\x00\x00\x00\x00(\x00\x00\x00\x00\x00\x00\x00'
  blpk: Raw compressed metadata of size '64': 'x\x9c\xabVJ)\xa9,HU\xb2RR\xb7I\xb3PW\xd2Q*\xceH\x04\xf1\xa3\x8d\x0c  VG)9?\xaf$13/\xb5\x08\xa8,\xaf4\xb7\xa0\x12\xa8,\xbf(\x05\xccwV\xaa\x05\x00\xad\x9a\x145'
  blpk: max meta size is deemed to be: 680
  blpk: raw_metadata_header: 'JSON\x00\x00\x00\x00\x00\x01\x01\x06D\x00\x00\x00\xa8\x02\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
  blpk: metadata has 616 preallocated empty bytes
  blpk: metadata checksum (adler32): '\x98\x18\x19@'
  blpk: metadata section occupies a total of 716.0B (716B)
  blpk: Handle chunk '0'
  blpk: checksum \(adler32\)\: .* (re)
  blpk: chunk handled, in: 50.0M (52428800B) out: 5.56M (5829276B)
  blpk: Handle chunk '1'
  blpk: checksum \(adler32\)\: .* (re)
  blpk: chunk handled, in: 50.0M (52428800B) out: 4.1M (4296901B)
  blpk: Handle chunk '2'
  blpk: checksum \(adler32\)\: .* (re)
  blpk: chunk handled, in: 50.0M (52428800B) out: 3.09M (3238299B)
  blpk: Handle chunk '3' (last)
  blpk: checksum \(adler32\)\: .* (re)
  blpk: chunk handled, in: 2.59M (2713600B) out: 167.4K (171418B)
  blpk: Writing '4' offsets: '[1100, 5830380, 10127285, 13365588]'
  blpk: Raw offsets: 'L\x04\x00\x00\x00\x00\x00\x00\xec\xf6X\x00\x00\x00\x00\x00\xb5\x87\x9a\x00\x00\x00\x00\x00T\xf1\xcb\x00\x00\x00\x00\x00'
  blpk: output file size: 12.91M (13537010B)
  blpk: compression ratio: 11.819449
  blpk: done
  $ blpk --debug decompress data.dat.blp data.dat.dcmp
  blpk: command line argument parsing complete
  blpk: command line arguments are: 
  blpk:     debug: True
  blpk:     force: False
  blpk:     in_file: data.dat.blp
  blpk:     no_check_extension: False
  blpk:     nthreads: .* (re)
  blpk:     out_file: data.dat.dcmp
  blpk:     subcommand: decompress
  blpk:     verbose: False
  blpk: using .* threads (re)
  blpk: getting ready for decompression
  blpk: input file is: 'data.dat.blp'
  blpk: output file is: 'data.dat.dcmp'
  blpk: input file size: 12.91M
  blpk: reading bloscpack header
  blpk: bloscpack_header_raw: 'blpk\x03\x03\x01\x08\x00\x00 \x03\x00h)\x00\x04\x00\x00\x00\x00\x00\x00\x00(\x00\x00\x00\x00\x00\x00\x00'
  blpk: bloscpack header: BloscpackHeader(format_version=3, offsets=True, metadata=True, checksum='adler32', typesize=8, chunk_size=52428800, last_chunk=2713600, nchunks=4, max_app_chunks=40)
  blpk: raw metadata header: ''JSON\x00\x00\x00\x00\x00\x01\x01\x06D\x00\x00\x00\xa8\x02\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00''
  blpk: MetadataHeader:
  blpk:     magic_format: 'JSON'
  blpk:     meta_options: '00000000'
  blpk:     meta_checksum: 'adler32'
  blpk:     meta_codec: 'zlib'
  blpk:     meta_level: 6
  blpk:     meta_size: 68.0B (68B)
  blpk:     max_meta_size: 680.0B (680B)
  blpk:     meta_comp_size: 64.0B (64B)
  blpk:     user_codec: ''
  blpk: metadata checksum OK (adler32): '\x98\x18\x19@' 
  blpk: read compressed metadata of size: '64'
  blpk: Read raw offsets: 'L\x04\x00\x00\x00\x00\x00\x00\xec\xf6X\x00\x00\x00\x00\x00\xb5\x87\x9a\x00\x00\x00\x00\x00T\xf1\xcb\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
  blpk: Offsets: [1100, 5830380, 10127285, 13365588]
  blpk: blosc_header: OrderedDict([('version', 2), ('versionlz', 1), ('flags', 1), ('typesize', 8), ('nbytes', 52428800), ('blocksize', 262144), ('ctbytes', 5829276)])
  blpk: decompressing chunk '0'
  blpk: checksum OK \(adler32\)\: .* (re)
  blpk: chunk handled, in: 5.56M (5829276B) out: 50.0M (52428800B)
  blpk: blosc_header: OrderedDict([('version', 2), ('versionlz', 1), ('flags', 1), ('typesize', 8), ('nbytes', 52428800), ('blocksize', 262144), ('ctbytes', 4296901)])
  blpk: decompressing chunk '1'
  blpk: checksum OK \(adler32\)\: .* (re)
  blpk: chunk handled, in: 4.1M (4296901B) out: 50.0M (52428800B)
  blpk: blosc_header: OrderedDict([('version', 2), ('versionlz', 1), ('flags', 1), ('typesize', 8), ('nbytes', 52428800), ('blocksize', 262144), ('ctbytes', 3238299)])
  blpk: decompressing chunk '2'
  blpk: checksum OK \(adler32\)\: .* (re)
  blpk: chunk handled, in: 3.09M (3238299B) out: 50.0M (52428800B)
  blpk: blosc_header: OrderedDict([('version', 2), ('versionlz', 1), ('flags', 1), ('typesize', 8), ('nbytes', 2713600), ('blocksize', 262144), ('ctbytes', 171418)])
  blpk: decompressing chunk '3' (last)
  blpk: checksum OK \(adler32\)\: .* (re)
  blpk: chunk handled, in: 167.4K (171418B) out: 2.59M (2713600B)
  blpk: output file size: 152.59M
  blpk: decompression ratio: 11.819449
  blpk: Metadata:
  blpk: {   u'container': u'numpy',
  blpk:     u'dtype': u"'<f8'",
  blpk:     u'order': u'C',
  blpk:     u'shape': [20000000]}
  blpk: done
  $ rm data.dat.blp data.dat.dcmp
Check that directory is clean.

  $ ls
  data.dat
  meta.json
